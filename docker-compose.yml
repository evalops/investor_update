version: '3.8'

services:
  investor-update:
    build:
      context: .
      dockerfile: Dockerfile
    image: investor-update:latest
    container_name: investor-update
    restart: unless-stopped
    environment:
      # Mercury API
      - MERCURY_API_TOKEN=${MERCURY_API_TOKEN}
      - EVALOPS_MERCURY_ACCOUNT_ID=${EVALOPS_MERCURY_ACCOUNT_ID}
      
      # Optional data sources
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_CREDENTIALS=${GCP_CREDENTIALS}
      
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_OWNER=${GITHUB_OWNER}
      - GITHUB_REPO=${GITHUB_REPO}
      
      - POSTHOG_API_KEY=${POSTHOG_API_KEY}
      - POSTHOG_PROJECT_ID=${POSTHOG_PROJECT_ID}
      
      - ATTIO_API_KEY=${ATTIO_API_KEY}
      
      # Application settings
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - TZ=${TZ:-UTC}
    volumes:
      - ./report-output:/app/report-output
      - cache-data:/app/.cache
      - ./logs:/app/logs
    networks:
      - investor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Optional: Redis for distributed caching
  redis:
    image: redis:7-alpine
    container_name: investor-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - investor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Optional: PostgreSQL for storing historical data
  postgres:
    image: postgres:15-alpine
    container_name: investor-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=investor_update
      - POSTGRES_USER=${DB_USER:-investor}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - investor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-investor}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: investor-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - investor-network
    depends_on:
      - postgres
      - redis

volumes:
  cache-data:
  redis-data:
  postgres-data:
  grafana-data:

networks:
  investor-network:
    driver: bridge